#[test_only]
module verifier::token_tests {
    use sui::clock;
    use verifier::token;

    #[error]
    const TOKEN_VERIFICATION_FAILED: u64 = 1;
    #[error]
    const TOKEN_VERIFICATION_SUCCEEDED_UNEXPECTEDLY: u64 = 2;

    #[test]
    fun test_token_verification_for_valid_data() {
        // Setup
        let mut ctx = tx_context::dummy();
        let mut clock = clock::create_for_testing(&mut ctx);
        clock.set_for_testing(1356185530); // Set clock to a fixed timestamp for testing

        // Define test data
        let message = x"2d6e207b227479706573223a7b22454950373132446f6d61696e223a5b7b226e616d65223a226e616d65222c2274797065223a22737472696e67227d2c7b226e616d65223a2276657273696f6e222c2274797065223a22737472696e67227d5d2c225369676e656444617461223a5b7b226e616d65223a227369676e6572222c2274797065223a2261646472657373227d2c7b226e616d65223a2275736572222c2274797065223a2261646472657373227d2c7b226e616d65223a226461746554696d654f6656616c69646174696f6e222c2274797065223a2275696e74323536227d5d7d2c227072696d61727954797065223a225369676e656444617461222c22646f6d61696e223a7b226e616d65223a224d7944417070222c2276657273696f6e223a22332e30227d2c226d657373616765223a7b227369676e6572223a22307865616644353445353435633037376361314262393235396661324639303039314462393646384343222c2275736572223a22307830303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030222c226461746554696d654f6656616c69646174696f6e223a313335363039393133307d7d0a";
        let signature = x"bafceb91b474c25febbb48a0852db29018c1cb0737f0c2821f6673235b6389f0d58c89b5796fd28c3a2765b142307f9c81183786bd6bd5ee38c87c3c98836e01";
        let public_key = x"3a7960fc89c77889238c84e412d8e4eb5aca556c14708a2cace2b9f34fa1fe52";
        let signed_msg = token::new(message, public_key, signature);

        // Verify token
        let token_valid = token::verify_token(&signed_msg, &ctx, &mut clock);

        // Assert result
        assert!(token_valid, TOKEN_VERIFICATION_FAILED);

        // Clean up
        clock.destroy_for_testing();
    }

    #[test]
    fun test_token_verification_for_invalid_message() {
        // Setup
        let mut ctx = tx_context::dummy();
        let mut clock = clock::create_for_testing(&mut ctx);
        clock.set_for_testing(1356185530); // Set clock to a fixed timestamp for testing

        // Define test data
        let message = x"5468697320697320616e20696e76616c6964206d657373616765";
        let signature = x"bafceb91b474c25febbb48a0852db29018c1cb0737f0c2821f6673235b6389f0d58c89b5796fd28c3a2765b142307f9c81183786bd6bd5ee38c87c3c98836e01";
        let public_key = x"3a7960fc89c77889238c84e412d8e4eb5aca556c14708a2cace2b9f34fa1fe52";
        let signed_msg = token::new(message, public_key, signature);

        // Verify token
        let token_valid = token::verify_token(&signed_msg, &ctx, &mut clock);

        // Assert result
        assert!(!token_valid, TOKEN_VERIFICATION_SUCCEEDED_UNEXPECTEDLY);

        // Clean up
        clock.destroy_for_testing();
    }

    #[test]
    fun test_token_verification_for_invalid_signature() {
        // Setup
        let mut ctx = tx_context::dummy();
        let mut clock = clock::create_for_testing(&mut ctx);
        clock.set_for_testing(1356185530); // Set clock to a fixed timestamp for testing

        // Define test data
        let message = x"2d6e207b227479706573223a7b22454950373132446f6d61696e223a5b7b226e616d65223a226e616d65222c2274797065223a22737472696e67227d2c7b226e616d65223a2276657273696f6e222c2274797065223a22737472696e67227d5d2c225369676e656444617461223a5b7b226e616d65223a227369676e6572222c2274797065223a2261646472657373227d2c7b226e616d65223a2275736572222c2274797065223a2261646472657373227d2c7b226e616d65223a226461746554696d654f6656616c69646174696f6e222c2274797065223a2275696e74323536227d5d7d2c227072696d61727954797065223a225369676e656444617461222c22646f6d61696e223a7b226e616d65223a224d7944417070222c2276657273696f6e223a22332e30227d2c226d657373616765223a7b227369676e6572223a22307865616644353445353435633037376361314262393235396661324639303039314462393646384343222c2275736572223a22307830303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030222c226461746554696d654f6656616c69646174696f6e223a313335363039393133307d7d0a";
        let signature = x"3dace20bdd41021f2f437f9222521a0769238bed45e12449cff8139a3f7a7b6c41ae1116ebc3ff375782ec2b6cf4b2b2d6ca7c69bdd887ff9aed97c165b1ae0e";
        let public_key = x"3a7960fc89c77889238c84e412d8e4eb5aca556c14708a2cace2b9f34fa1fe52";
        let signed_msg = token::new(message, public_key, signature);

        // Verify token
        let token_valid = token::verify_token(&signed_msg, &ctx, &mut clock);

        // Assert result
        assert!(!token_valid, TOKEN_VERIFICATION_SUCCEEDED_UNEXPECTEDLY);

        // Clean up
        clock.destroy_for_testing();
    }


    #[test]
    fun test_token_verification_for_invalid_key() {
        // Setup
        let mut ctx = tx_context::dummy();
        let mut clock = clock::create_for_testing(&mut ctx);
        clock.set_for_testing(1356185530); // Set clock to a fixed timestamp for testing

        // Define test data
        let message = x"2d6e207b227479706573223a7b22454950373132446f6d61696e223a5b7b226e616d65223a226e616d65222c2274797065223a22737472696e67227d2c7b226e616d65223a2276657273696f6e222c2274797065223a22737472696e67227d5d2c225369676e656444617461223a5b7b226e616d65223a227369676e6572222c2274797065223a2261646472657373227d2c7b226e616d65223a2275736572222c2274797065223a2261646472657373227d2c7b226e616d65223a226461746554696d654f6656616c69646174696f6e222c2274797065223a2275696e74323536227d5d7d2c227072696d61727954797065223a225369676e656444617461222c22646f6d61696e223a7b226e616d65223a224d7944417070222c2276657273696f6e223a22332e30227d2c226d657373616765223a7b227369676e6572223a22307865616644353445353435633037376361314262393235396661324639303039314462393646384343222c2275736572223a22307830303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030222c226461746554696d654f6656616c69646174696f6e223a313335363039393133307d7d0a";
        let signature = x"bafceb91b474c25febbb48a0852db29018c1cb0737f0c2821f6673235b6389f0d58c89b5796fd28c3a2765b142307f9c81183786bd6bd5ee38c87c3c98836e01";
        let public_key = x"868c95ff68f628db04a60bb0d303b5fc1dde7f1f6a7691de769dd4cca4098692";
        let signed_msg = token::new(message, public_key, signature);

        // Verify token
        let token_valid = token::verify_token(&signed_msg, &ctx, &mut clock);

        // Assert result
        assert!(!token_valid, TOKEN_VERIFICATION_SUCCEEDED_UNEXPECTEDLY);

        // Clean up
        clock.destroy_for_testing();
    }

    #[test]
    fun test_token_verification_for_invalid_timestamp() {
        // Setup
        let mut ctx = tx_context::dummy();
        let mut clock = clock::create_for_testing(&mut ctx);
        clock.set_for_testing(1356358330); // Set clock to a fixed timestamp for testing

        // Define test data
        let message = x"2d6e207b227479706573223a7b22454950373132446f6d61696e223a5b7b226e616d65223a226e616d65222c2274797065223a22737472696e67227d2c7b226e616d65223a2276657273696f6e222c2274797065223a22737472696e67227d5d2c225369676e656444617461223a5b7b226e616d65223a227369676e6572222c2274797065223a2261646472657373227d2c7b226e616d65223a2275736572222c2274797065223a2261646472657373227d2c7b226e616d65223a226461746554696d654f6656616c69646174696f6e222c2274797065223a2275696e74323536227d5d7d2c227072696d61727954797065223a225369676e656444617461222c22646f6d61696e223a7b226e616d65223a224d7944417070222c2276657273696f6e223a22332e30227d2c226d657373616765223a7b227369676e6572223a22307865616644353445353435633037376361314262393235396661324639303039314462393646384343222c2275736572223a22307830303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030222c226461746554696d654f6656616c69646174696f6e223a313335363039393133307d7d0a";
        let signature = x"bafceb91b474c25febbb48a0852db29018c1cb0737f0c2821f6673235b6389f0d58c89b5796fd28c3a2765b142307f9c81183786bd6bd5ee38c87c3c98836e01";
        let public_key = x"3a7960fc89c77889238c84e412d8e4eb5aca556c14708a2cace2b9f34fa1fe52";
        let signed_msg = token::new(message, public_key, signature);

        // Verify token
        let token_valid = token::verify_token(&signed_msg, &ctx, &mut clock);

        // Assert result
        assert!(!token_valid, TOKEN_VERIFICATION_SUCCEEDED_UNEXPECTEDLY);

        // Clean up
        clock.destroy_for_testing();
    }
}

