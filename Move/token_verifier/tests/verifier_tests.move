#[test_only]
module verifier::token_tests {
    use sui::clock;
    use verifier::token;

    #[error]
    const TOKEN_VERIFICATION_FAILED: u64 = 1;
    #[error]
    const TOKEN_VERIFICATION_SUCCEEDED_UNEXPECTEDLY: u64 = 2;

    #[test]
    fun test_token_verification_for_valid_data() {
        // Setup
        let mut ctx = tx_context::dummy();
        let mut clock = clock::create_for_testing(&mut ctx);
        clock.set_for_testing(1726684827990); // Set clock to a fixed timestamp for testing

        // Define test data
        let message = x"2d6e207b227479706573223a7b22454950373132446f6d61696e223a5b7b226e616d65223a226e616d65222c2274797065223a22737472696e67227d2c7b226e616d65223a2276657273696f6e222c2274797065223a22737472696e67227d5d2c225369676e656444617461223a5b7b226e616d65223a227369676e6572222c2274797065223a2261646472657373227d2c7b226e616d65223a2275736572222c2274797065223a2261646472657373227d2c7b226e616d65223a226461746554696d654f6656616c69646174696f6e222c2274797065223a2275696e74323536227d5d7d2c227072696d61727954797065223a225369676e656444617461222c22646f6d61696e223a7b226e616d65223a224d7944417070222c2276657273696f6e223a22332e30227d2c226d657373616765223a7b227369676e6572223a22307865616644353445353435633037376361314262393235396661324639303039314462393646384343222c2275736572223a22307830303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030222c226461746554696d654f6656616c69646174696f6e223a313732363638343832373936337d7d0a";
        let signature = x"376c3b4ff3cf24a389a329c964b10e1bfca8131894f2541d6f1ee2bf9479941e84c75f6790d20841ca903b3c35356016d609900d80a4eda02f085a9b2a79120f";
        let public_key = x"7e0f7d4f55fe30cb37649ca389af06a83b45ad95e19dccb971ab89b96599f4f5";
        let signed_msg = token::new(message, public_key, signature);

        // Verify token
        let token_valid = token::verify_token(&signed_msg, &clock, &mut ctx);

        // Assert result
        assert!(token_valid, TOKEN_VERIFICATION_FAILED);

        // Clean up
        clock.destroy_for_testing();
    }

    #[test]
    fun test_token_verification_for_valid_data_unfold() {
        // Setup
        let mut ctx = tx_context::dummy();
        let mut clock = clock::create_for_testing(&mut ctx);
        clock.set_for_testing(1726684827990); // Set clock to a fixed timestamp for testing

        // Define test data
        let message = x"2d6e207b227479706573223a7b22454950373132446f6d61696e223a5b7b226e616d65223a226e616d65222c2274797065223a22737472696e67227d2c7b226e616d65223a2276657273696f6e222c2274797065223a22737472696e67227d5d2c225369676e656444617461223a5b7b226e616d65223a227369676e6572222c2274797065223a2261646472657373227d2c7b226e616d65223a2275736572222c2274797065223a2261646472657373227d2c7b226e616d65223a226461746554696d654f6656616c69646174696f6e222c2274797065223a2275696e74323536227d5d7d2c227072696d61727954797065223a225369676e656444617461222c22646f6d61696e223a7b226e616d65223a224d7944417070222c2276657273696f6e223a22332e30227d2c226d657373616765223a7b227369676e6572223a22307865616644353445353435633037376361314262393235396661324639303039314462393646384343222c2275736572223a22307830303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030222c226461746554696d654f6656616c69646174696f6e223a313732363638343832373936337d7d0a";
        let signature = x"376c3b4ff3cf24a389a329c964b10e1bfca8131894f2541d6f1ee2bf9479941e84c75f6790d20841ca903b3c35356016d609900d80a4eda02f085a9b2a79120f";
        let public_key = x"7e0f7d4f55fe30cb37649ca389af06a83b45ad95e19dccb971ab89b96599f4f5";

        // Verify token
        let token_valid = token::verify_token_unfold(message, public_key, signature, &clock, &mut ctx);

        // Assert result
        assert!(token_valid, TOKEN_VERIFICATION_FAILED);

        // Clean up
        clock.destroy_for_testing();
    }

    #[test]
    fun test_token_verification_for_invalid_message() {
        // Setup
        let mut ctx = tx_context::dummy();
        let mut clock = clock::create_for_testing(&mut ctx);
        clock.set_for_testing(1726684827990); // Set clock to a fixed timestamp for testing

        // Define test data
        let message = x"2d6a207b227479706573223a7b22454950373132446f6d61696e223a5b7b226e616d65223a226e616d65222c2274797065223a22737472696e67227d2c7b226e616d65223a2276657273696f6e222c2274797065223a22737472696e67227d5d2c225369676e656444617461223a5b7b226e616d65223a227369676e6572222c2274797065223a2261646472657373227d2c7b226e616d65223a2275736572222c2274797065223a2261646472657373227d2c7b226e616d65223a226461746554696d654f6656616c69646174696f6e222c2274797065223a2275696e74323536227d5d7d2c227072696d61727954797065223a225369676e656444617461222c22646f6d61696e223a7b226e616d65223a224d7944417070222c2276657273696f6e223a22332e30227d2c226d657373616765223a7b227369676e6572223a22307865616644353445353435633037376361314262393235396661324639303039314462393646384343222c2275736572223a22307830303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030222c226461746554696d654f6656616c69646174696f6e223a313732363638343832373936337d7d0a";
        let signature = x"376c3b4ff3cf24a389a329c964b10e1bfca8131894f2541d6f1ee2bf9479941e84c75f6790d20841ca903b3c35356016d609900d80a4eda02f085a9b2a79120f";
        let public_key = x"7e0f7d4f55fe30cb37649ca389af06a83b45ad95e19dccb971ab89b96599f4f5";
        let signed_msg = token::new(message, public_key, signature);

        // Verify token
        let token_valid = token::verify_token(&signed_msg, &clock, &mut ctx);

        // Assert result
        assert!(!token_valid, TOKEN_VERIFICATION_SUCCEEDED_UNEXPECTEDLY);

        // Clean up
        clock.destroy_for_testing();
    }

    #[test]
    fun test_token_verification_for_invalid_message_unfold() {
        // Setup
        let mut ctx = tx_context::dummy();
        let mut clock = clock::create_for_testing(&mut ctx);
        clock.set_for_testing(1726684827990); // Set clock to a fixed timestamp for testing

        // Define test data
        let message = x"2d6e206b227479706573223a7b22454950373132446f6d61696e223a5b7b226e616d65223a226e616d65222c2274797065223a22737472696e67227d2c7b226e616d65223a2276657273696f6e222c2274797065223a22737472696e67227d5d2c225369676e656444617461223a5b7b226e616d65223a227369676e6572222c2274797065223a2261646472657373227d2c7b226e616d65223a2275736572222c2274797065223a2261646472657373227d2c7b226e616d65223a226461746554696d654f6656616c69646174696f6e222c2274797065223a2275696e74323536227d5d7d2c227072696d61727954797065223a225369676e656444617461222c22646f6d61696e223a7b226e616d65223a224d7944417070222c2276657273696f6e223a22332e30227d2c226d657373616765223a7b227369676e6572223a22307865616644353445353435633037376361314262393235396661324639303039314462393646384343222c2275736572223a22307830303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030222c226461746554696d654f6656616c69646174696f6e223a313732363638343832373936337d7d0a";
        let signature = x"376c3b4ff3cf24a389a329c964b10e1bfca8131894f2541d6f1ee2bf9479941e84c75f6790d20841ca903b3c35356016d609900d80a4eda02f085a9b2a79120f";
        let public_key = x"7e0f7d4f55fe30cb37649ca389af06a83b45ad95e19dccb971ab89b96599f4f5";

        // Verify token
        let token_valid = token::verify_token_unfold(message, public_key, signature, &clock, &mut ctx);

        // Assert result
        assert!(!token_valid, TOKEN_VERIFICATION_SUCCEEDED_UNEXPECTEDLY);

        // Clean up
        clock.destroy_for_testing();
    }

    #[test]
    fun test_token_verification_for_invalid_signature() {
        // Setup
        let mut ctx = tx_context::dummy();
        let mut clock = clock::create_for_testing(&mut ctx);
        clock.set_for_testing(1726684827990); // Set clock to a fixed timestamp for testing

        // Define test data
        let message = x"2d6e207b227479706573223a7b22454950373132446f6d61696e223a5b7b226e616d65223a226e616d65222c2274797065223a22737472696e67227d2c7b226e616d65223a2276657273696f6e222c2274797065223a22737472696e67227d5d2c225369676e656444617461223a5b7b226e616d65223a227369676e6572222c2274797065223a2261646472657373227d2c7b226e616d65223a2275736572222c2274797065223a2261646472657373227d2c7b226e616d65223a226461746554696d654f6656616c69646174696f6e222c2274797065223a2275696e74323536227d5d7d2c227072696d61727954797065223a225369676e656444617461222c22646f6d61696e223a7b226e616d65223a224d7944417070222c2276657273696f6e223a22332e30227d2c226d657373616765223a7b227369676e6572223a22307865616644353445353435633037376361314262393235396661324639303039314462393646384343222c2275736572223a22307830303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030222c226461746554696d654f6656616c69646174696f6e223a313732363638343832373936337d7d0a";
        let signature = x"377c3b4ff3cf24a389a329c964b10e1bfca8131894f2541d6f1ee2bf9479941e84c75f6790d20841ca903b3c35356016d609900d80a4eda02f085a9b2a79120f";
        let public_key = x"7e0f7d4f55fe30cb37649ca389af06a83b45ad95e19dccb971ab89b96599f4f5";
        let signed_msg = token::new(message, public_key, signature);

        // Verify token
        let token_valid = token::verify_token(&signed_msg, &clock, &mut ctx);

        // Assert result
        assert!(!token_valid, TOKEN_VERIFICATION_SUCCEEDED_UNEXPECTEDLY);

        // Clean up
        clock.destroy_for_testing();
    }


    #[test]
    fun test_token_verification_for_invalid_key() {
        // Setup
        let mut ctx = tx_context::dummy();
        let mut clock = clock::create_for_testing(&mut ctx);
        clock.set_for_testing(1726684827990); // Set clock to a fixed timestamp for testing

        // Define test data
        let message = x"2d6e207b227479706573223a7b22454950373132446f6d61696e223a5b7b226e616d65223a226e616d65222c2274797065223a22737472696e67227d2c7b226e616d65223a2276657273696f6e222c2274797065223a22737472696e67227d5d2c225369676e656444617461223a5b7b226e616d65223a227369676e6572222c2274797065223a2261646472657373227d2c7b226e616d65223a2275736572222c2274797065223a2261646472657373227d2c7b226e616d65223a226461746554696d654f6656616c69646174696f6e222c2274797065223a2275696e74323536227d5d7d2c227072696d61727954797065223a225369676e656444617461222c22646f6d61696e223a7b226e616d65223a224d7944417070222c2276657273696f6e223a22332e30227d2c226d657373616765223a7b227369676e6572223a22307865616644353445353435633037376361314262393235396661324639303039314462393646384343222c2275736572223a22307830303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030222c226461746554696d654f6656616c69646174696f6e223a313732363638343832373936337d7d0a";
        let signature = x"376c3b4ff3cf24a389a329c964b10e1bfca8131894f2541d6f1ee2bf9479941e84c75f6790d20841ca903b3c35356016d609900d80a4eda02f085a9b2a79120f";
        let public_key = x"7a0f7d4f55fe30cb37649ca389af06a83b45ad95e19dccb971ab89b96599f4f5";
        let signed_msg = token::new(message, public_key, signature);

        // Verify token
        let token_valid = token::verify_token(&signed_msg, &clock, &mut ctx);

        // Assert result
        assert!(!token_valid, TOKEN_VERIFICATION_SUCCEEDED_UNEXPECTEDLY);

        // Clean up
        clock.destroy_for_testing();
    }

    #[test]
    fun test_token_verification_for_invalid_timestamp() {
        // Setup
        let mut ctx = tx_context::dummy();
        let mut clock = clock::create_for_testing(&mut ctx);
        clock.set_for_testing(1726857627990); // Set clock to a fixed timestamp for testing

        // Define test data
        let message = x"2d6e207b227479706573223a7b22454950373132446f6d61696e223a5b7b226e616d65223a226e616d65222c2274797065223a22737472696e67227d2c7b226e616d65223a2276657273696f6e222c2274797065223a22737472696e67227d5d2c225369676e656444617461223a5b7b226e616d65223a227369676e6572222c2274797065223a2261646472657373227d2c7b226e616d65223a2275736572222c2274797065223a2261646472657373227d2c7b226e616d65223a226461746554696d654f6656616c69646174696f6e222c2274797065223a2275696e74323536227d5d7d2c227072696d61727954797065223a225369676e656444617461222c22646f6d61696e223a7b226e616d65223a224d7944417070222c2276657273696f6e223a22332e30227d2c226d657373616765223a7b227369676e6572223a22307865616644353445353435633037376361314262393235396661324639303039314462393646384343222c2275736572223a22307830303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030222c226461746554696d654f6656616c69646174696f6e223a313732363638343832373936337d7d0a";
        let signature = x"376c3b4ff3cf24a389a329c964b10e1bfca8131894f2541d6f1ee2bf9479941e84c75f6790d20841ca903b3c35356016d609900d80a4eda02f085a9b2a79120f";
        let public_key = x"7e0f7d4f55fe30cb37649ca389af06a83b45ad95e19dccb971ab89b96599f4f5";
        let signed_msg = token::new(message, public_key, signature);

        // Verify token
        let token_valid = token::verify_token(&signed_msg, &clock, &mut ctx);

        // Assert result
        assert!(!token_valid, TOKEN_VERIFICATION_SUCCEEDED_UNEXPECTEDLY);

        // Clean up
        clock.destroy_for_testing();
    }

    #[test]
    fun test_token_verification_for_invalid_user() {
        // Setup
        let mut ctx = tx_context::dummy();
        let mut clock = clock::create_for_testing(&mut ctx);
        clock.set_for_testing(1726684827990); // Set clock to a fixed timestamp for testing

        // Define test data
        let message = x"2d6e207b227479706573223a7b22454950373132446f6d61696e223a5b7b226e616d65223a226e616d65222c2274797065223a22737472696e67227d2c7b226e616d65223a2276657273696f6e222c2274797065223a22737472696e67227d5d2c225369676e656444617461223a5b7b226e616d65223a227369676e6572222c2274797065223a2261646472657373227d2c7b226e616d65223a2275736572222c2274797065223a2261646472657373227d2c7b226e616d65223a226461746554696d654f6656616c69646174696f6e222c2274797065223a2275696e74323536227d5d7d2c227072696d61727954797065223a225369676e656444617461222c22646f6d61696e223a7b226e616d65223a224d7944417070222c2276657273696f6e223a22332e30227d2c226d657373616765223a7b227369676e6572223a22307865616644353445353435633037376361314262393235396661324639303039314462393646384343222c2275736572223a22307830303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303031222c226461746554696d654f6656616c69646174696f6e223a313732363638343832373936337d7d0a";
        let signature = x"9fab924e11c4ce83eee4b6337bba02d9e268936480d1495a5f2f31a7c52ea7d39b0396530288ec2b2a68f6a1a91db411b587cedb3b876b4ca2914decde01d604";
        let public_key = x"7e0f7d4f55fe30cb37649ca389af06a83b45ad95e19dccb971ab89b96599f4f5";
        let signed_msg = token::new(message, public_key, signature);

        // Verify token
        let token_valid = token::verify_token(&signed_msg, &clock, &mut ctx);

        // Assert result
        assert!(!token_valid, TOKEN_VERIFICATION_SUCCEEDED_UNEXPECTEDLY);

        // Clean up
        clock.destroy_for_testing();
    }

    #[test]
    fun test_token_verification_for_invalid_signer() {
        // Setup
        let mut ctx = tx_context::dummy();
        let mut clock = clock::create_for_testing(&mut ctx);
        clock.set_for_testing(1726684827990); // Set clock to a fixed timestamp for testing

        // Define test data
        let message = x"2d6e207b227479706573223a7b22454950373132446f6d61696e223a5b7b226e616d65223a226e616d65222c2274797065223a22737472696e67227d2c7b226e616d65223a2276657273696f6e222c2274797065223a22737472696e67227d5d2c225369676e656444617461223a5b7b226e616d65223a227369676e6572222c2274797065223a2261646472657373227d2c7b226e616d65223a2275736572222c2274797065223a2261646472657373227d2c7b226e616d65223a226461746554696d654f6656616c69646174696f6e222c2274797065223a2275696e74323536227d5d7d2c227072696d61727954797065223a225369676e656444617461222c22646f6d61696e223a7b226e616d65223a224d7944417070222c2276657273696f6e223a22332e30227d2c226d657373616765223a7b227369676e6572223a22307831616644353445353435633037376361314262393235396661324639303039314462393646384343222c2275736572223a22307830303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030222c226461746554696d654f6656616c69646174696f6e223a313732363638343832373936337d7d0a";
        let signature = x"0bb5bc1cf6f4ab016bed87de9178d248e07e5d4de078fe599f243414fa175e958b440a90a5f6034562be6b7f81063d22b477487061b077de7ff395f0f45a190a";
        let public_key = x"7e0f7d4f55fe30cb37649ca389af06a83b45ad95e19dccb971ab89b96599f4f5";
        let signed_msg = token::new(message, public_key, signature);

        // Verify token
        let token_valid = token::verify_token(&signed_msg, &clock, &mut ctx);

        // Assert result
        assert!(!token_valid, TOKEN_VERIFICATION_SUCCEEDED_UNEXPECTEDLY);

        // Clean up
        clock.destroy_for_testing();
    }
}

